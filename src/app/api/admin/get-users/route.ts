import { getServerSession } from "next-auth";
import { prisma } from "@/lib/prisma";
import { authOptions } from "@/lib/auth"; // ImportÄƒ configuraÈ›ia NextAuth
import { isError } from "@/utils/helper";

export async function GET() {
  try {
    // ObÈ›ine sesiunea utilizatorului
    const session = await getServerSession(authOptions);
    console.log("Session:", session); // âœ… Debugging

    if (!session || !session.user?.email) {
      return new Response(JSON.stringify({ error: "Trebuie sÄƒ fii autentificat pentru a accesa aceastÄƒ resursÄƒ." }), {
          status: 401,
          headers: { "Content-Type": "application/json" },
        });
    }

    const userEmail = session?.user?.email;
    console.log("User email:", userEmail); // âœ… Debugging

    // CautÄƒ utilizatorul Ã®n baza de date pentru a verifica rolul sÄƒu
    const user = await prisma.user.findUnique({
      where: { email: userEmail as string },
      select: { role: true },
    });

    console.log("User:", user); // âœ… Debugging

    if (!user || user?.role !== "ADMIN") {
      return new Response(JSON.stringify({error: "Nu ai permisiunea de a accesa aceastÄƒ resursÄƒ."}), { status: 403 });
    }

    // ğŸ†• QUERY MODIFICAT pentru a include rating È™i reviewsCount
    const users = await prisma.user.findMany({
      where: {},
      select: {
        id: true,
        name: true,
        email: true,
        image: true,
        role: true,
        gender: true,
        provider: {
          select: {
            id: true,
            online: true,
            description: true,
            grossVolume: true, // âœ… Deja inclus pentru venituri
            tools: {
              select: {
                id: true,
                name: true
              }
            },
            specialities: {  // âœ… RelaÈ›ia acum este recunoscutÄƒ corect
              select: {
                id: true,
                name: true,
                description: true
              }
            },
            // ğŸ†• ADÄ‚UGAT: Reviews pentru calculul rating-ului
            reviews: {
              select: {
                rating: true
              }
            },
            // ğŸ†• ADÄ‚UGAT: Count pentru numÄƒrul total de recenzii
            _count: {
              select: {
                reviews: true
              }
            }
          }
        }
      }
    });

    console.log("Users raw:", users); // âœ… Debugging

    if (!users || users.length === 0) {
      return new Response(JSON.stringify({ error: "Nu s-au gÄƒsit utilizatori." }), { status: 404 });
    }

    // ğŸ†• PROCESEAZÄ‚ datele pentru a calcula rating-ul mediu È™i adÄƒuga reviewsCount
    const processedUsers = users.map(user => {
      if (!user.provider) {
        return user; // DacÄƒ nu e provider, returneazÄƒ user-ul ca atare
      }

      // CalculeazÄƒ rating-ul mediu din recenzii
      const reviews = user.provider.reviews;
      let averageRating = 0;
      const reviewsCount = user.provider._count.reviews;

      if (reviews.length > 0) {
        const totalRating = reviews.reduce((sum, review) => sum + review.rating, 0);
        averageRating = Number((totalRating / reviews.length).toFixed(1));
      }

      return {
        ...user,
        provider: {
          ...user.provider,
          // ğŸ†• AdaugÄƒ rating-ul calculat
          rating: averageRating,
          // ğŸ†• AdaugÄƒ numÄƒrul de recenzii
          reviewsCount: reviewsCount,
          // EliminÄƒ datele procesate pentru a nu polua rÄƒspunsul
          reviews: undefined,
          _count: undefined
        }
      };
    });

    console.log("Users processed:", processedUsers); // âœ… Debugging pentru datele procesate

    return new Response(JSON.stringify({ users: processedUsers }), { 
      status: 200,
      headers: { "Content-Type": "application/json" } 
    });
  } catch (error: unknown) {
    const message = isError(error) ? error.message : String(error);

    console.error('Eroare la obÈ›inerea providerilor:', message);

    return new Response(JSON.stringify({ error: "A apÄƒrut o eroare la obÈ›inerea utilizatorilor." }), { 
      status: 500,
      headers: { "Content-Type": "application/json" }, 
    });
  }
}