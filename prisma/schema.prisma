generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  STANDARD
}

model User {
  id                  String               @id @default(uuid())
  name                String?
  email               String?              @unique
  emailVerified       DateTime?
  image               String?
  password            String?
  birthDate           DateTime?
  gender              String?
  role                Role                 @default(STANDARD)
  consultingSessions  ConsultingSession[]  @relation("ClientSessions")
  accounts            Account[]
  sessions            Session[]            @relation("UserSessions")
  provider            Provider?            @relation("UserToProvider")
  reviewsFrom         Review[]             @relation("ReviewFromUser")
  groupUsers          GroupUsers[]
  chatGroups          ChatGroup[]
}

model Provider {
  id               String       @id @default(uuid())
  userId           String       @unique
  user             User         @relation("UserToProvider", fields: [userId], references: [id], onDelete: Cascade)
  description      String?
  grossVolume      Int?
  tools            Tool[]       
  sessions         ConsultingSession[] @relation("ProviderSessions")
  specialities     Speciality[] 
  readingId        String?                                // Foreign key
  reading          Reading?     @relation("ProviderReading")
  mainSpecialityId String?     
  mainToolId       String?       
  mainSpeciality   Speciality?  @relation("MainSpeciality", fields: [mainSpecialityId], references: [id])
  mainTool         Tool?        @relation("MainTool", fields: [mainToolId], references: [id])
}


model Speciality {
  id                     String        @id @default(uuid())
  providerId             String
  name                   String
  description            String?
  price                  Float
  provider               Provider      @relation(fields: [providerId], references: [id], onDelete: Cascade)
  mainSpecialityProvider Provider[]    @relation("MainSpeciality")
  sessions               ConsultingSession[]
}

model Tool {
  id                String       @id @default(uuid())
  providerId        String
  name              String
  description       String?
  provider          Provider     @relation(fields: [providerId], references: [id], onDelete: Cascade)
  mainToolProvider  Provider[]   @relation("MainTool")
}

model ConsultingSession {
  id           String      @id @default(uuid())
  providerId   String
  clientId     String
  specialityId String

  startDate    DateTime?
  endDate      DateTime?
  price        Int?
  isFinished   Boolean     @default(false)

  provider     Provider    @relation("ProviderSessions", fields: [providerId], references: [id], onDelete: Cascade)
  client       User        @relation("ClientSessions", fields: [clientId], references: [id], onDelete: Cascade)
  speciality   Speciality  @relation(fields: [specialityId], references: [id], onDelete: Cascade)
}

model Reading {
  id          String   @id @default(uuid())
  providerId  String   @unique
  name        String
  description String?
  provider    Provider @relation("ProviderReading", fields: [providerId], references: [id], onDelete: Cascade)
}

model Review {
  id         String   @id @default(uuid())
  comment    String?
  fromUser   User     @relation("ReviewFromUser", fields: [fromUserId], references: [id], onDelete: Cascade)
  fromUserId String
}

model Account {
  id                Int      @id @default(autoincrement())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  user         User     @relation("UserSessions", fields: [userId], references: [id], onDelete: Cascade)
  expires      DateTime
}

model GroupUsers {
  id         Int        @id @default(autoincrement())
  group      ChatGroup  @relation(fields: [group_id], references: [id], onDelete: Cascade)
  group_id   String
  user       User       @relation(fields: [user_id], references: [id])
  user_id    String
  createdAt  DateTime   @default(now())
}

model ChatGroup {
  id         String     @id @default(uuid())
  user       User       @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id    String
  name       String
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt

  groupUsers GroupUsers[]
}
