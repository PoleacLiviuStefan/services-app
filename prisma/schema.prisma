// prisma/schema.prisma

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum Role {
  ADMIN
  STANDARD
}

model Service {
  id            Int      @id @default(autoincrement())
  name          String     
  call_price    Float?
  message_price Float?
  video_price   Float?
  // Fiecare serviciu aparține unui provider
  provider      Provider @relation(fields: [providerId], references: [id], onDelete: Cascade)
  providerId    String
}

model Tool {
  id         Int      @id @default(autoincrement())
  name       String   
  // Fiecare tool aparține unui provider
  provider   Provider @relation(fields: [providerId], references: [id], onDelete: Cascade)
  providerId String
}

model Review {
  id         Int      @id @default(autoincrement())
  stars      Int      
  date       DateTime
  comment    String?
  fromUser   User     @relation("ReviewFromUser", fields: [fromUserId], references: [id], onDelete: Cascade)
  fromUserId String
  provider   Provider @relation(fields: [providerId], references: [id], onDelete: Cascade)
  providerId String
}

model User {
  id            String    @id @default(uuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?   
  birthDate     DateTime?
  gender        String?
  role          Role      @default(STANDARD)
  accounts      Account[]
  sessions      Session[]
  // Dacă acest câmp este null, utilizatorul este client; dacă există o relație, utilizatorul este furnizor.
  provider      Provider?
  reviewsGiven  Review[]  @relation("ReviewFromUser")
}

model Provider {
  id          String    @id @default(uuid())
  userId      String    @unique
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  description String?
  services    Service[]
  tools       Tool[]
  reviews     Review[]
}

model Account {
  id                Int      @id @default(autoincrement())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           Int      @id @default(autoincrement())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime
  @@unique([identifier, token])
}
